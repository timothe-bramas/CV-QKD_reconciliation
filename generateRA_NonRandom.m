n=64800;
k=n/10;
m=n-k;


%These columns weights come from "Repeat-Accumulate Codes for Reconciliation in Continuous Variable Quantum Key Distribution" by S. J. Jonhson

values_long=[0 15960 45564 48399 2007 19137 45463 33191 39884 45109 41483 19553 51001 33262 57015 26986 21998 24833 42258;
        2292 41854 46985 49651 52444 9757 53528 413 36760 43848 42277 34280 32901 14138 54562 43304 46148 9531 678;
        21678 8451 45933 9635 7184 12580 8135 21014 23184 19605 57842 17646 19672 34665 50644 26193 49109 47297 2526;
        1138 33012 34598 31489 56740 52609 15634 7597 985 46 53850 19656 35877 44343 22954 25459 57073 48417 15447;
        26306 3957 35415 50885 8951 34488 14059 17762 3933 799 36619 22981 27176 31670 24464 42482 21818 8315 734;
        37644 32896 30382 32399 13304 32643 8290 55214 18273 36972 12505 48674 28470 47239 40769 36028 5018 50298 17934;
        25904 11332 18160 29161 12384 37865 25403 28531 33394 2199 14952 13698 53705 40498 31923 26207 23788 41053 48302];

values_3=[34399 54407 52709;  21971 50797 7809; 51405 12545 14619; 24733 56388 6919; 25934 55070 14776;35296 53121 34611;
          33683 55690 50123; 1236 30161 10606; 14513 36456 24067; 4297 46488 32303; 20455 8354 55976];

%Indexing according to matlab's indexing
values_long=values_long+1;
values_3=values_3+1;

H=sparse(m,n);
col=sparse(m,1);
%Adding the right part of the matrix (accumulator)
H(:,k+1:end)=speye(m) + spdiags([ones(m,1)],-1,m,m);

for jj=1:18
  first_col_index=360*(jj-1)+1;
  if jj<=7
    first_col=sparse(m,1);
    first_col(values_long(jj,:))=1;
  else
    first_col=sparse(m,1);
    first_col(values_3(jj-7,:))=1;
  end
  H(:,first_col_index)=first_col;

  for j=1:359
    H(:,first_col_index+j)=circshift(first_col,135*j);
  end

endfor


